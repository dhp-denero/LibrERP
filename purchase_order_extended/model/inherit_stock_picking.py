# -*- encoding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#
#    Copyright (C) 2018 Didotech srl (<http://www.didotech.com>).
#
#                       All Rights Reserved
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from openerp.osv import orm, fields


class stock_picking(orm.Model):
    _inherit = 'stock.picking'

    def _prepare_invoice(self, cr, uid, picking, partner, inv_type, journal_id, context=None):
        """ Inherit the original function of the 'stock' module in order to override some
            values if the picking has been generated by a purchase order
        """
        invoice_vals = super(stock_picking, self)._prepare_invoice(cr, uid, picking, partner, inv_type, journal_id, context=context)
        if picking.purchase_id:
            payment_term = partner.property_payment_term_payable and partner.property_payment_term_payable.id or partner.property_payment_term and partner.property_payment_term.id or False
            if payment_term:
                invoice_vals['payment_term'] = payment_term
        return invoice_vals

    def _invoice_hook(self, cr, uid, picking, invoice_id):
        context = self.pool['res.users'].context_get(cr, uid)
        res = super(stock_picking, self)._invoice_hook(cr, uid, picking, invoice_id)
        purchase_obj = self.pool['purchase.order']
        purchase_line_obj = self.pool['purchase.order.line']
        invoice_obj = self.pool['account.invoice']
        invoice_line_obj = self.pool['account.invoice.line']
        if picking.purchase_id:
            purchase_lines = picking.purchase_id.order_line
            inv_line_data = {}
            for line in purchase_lines:
                if line.product_id.type == 'service' and not line.invoiced:
                    if line.invoiced:
                        continue
                    acc_id = purchase_obj._choose_account_from_po_line(cr, uid, line, context=context)
                    inv_line_data = purchase_obj._prepare_inv_line(cr, uid, acc_id, line, context=context)
                    inv_line_data.update({'origin': line.order_id.name, 'invoice_id': invoice_id})
                    inv_id = invoice_line_obj.create(cr, uid, inv_line_data, context=context)
                    purchase_line_obj.write(cr, uid, [line.id], {'invoiced': True, 'invoice_lines': [(4, inv_id)]})

            if inv_line_data:
                invoice_obj.button_reset_taxes(cr, uid, [invoice_id], context=context)

        return res
